print("==== START VAN SCRIPT ====")

from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from googleapiclient.errors import HttpError
from oauth2client.file import Storage
from oauth2client.tools import run_flow
from oauth2client.client import flow_from_clientsecrets
import os
import json
import signal
import sys
import traceback
import re

# === Paths ===
SCRIPT_FILE = "data/scripts/script.txt"
TITLE_FILE = "data/thumbnails/title.txt"
TOPIC_FILE = "data/topic.json"
VIDEO_PATH = "data/videos/output.mp4"

# === Env Secrets ===
CLIENT_SECRET_JSON_ENV = "YOUTUBE_CLIENT_SECRET_JSON"
OAUTH2_JSON_ENV = "YOUTUBE_REFRESH_TOKEN_JSON"
CLIENT_SECRETS_FILE = "client_secret.json"
TOKEN_FILE = "oauth2.json"

# === Debugging
def debug_list_folder(path):
    try:
        print(f"[DEBUG] Inhoud van {path}: {os.listdir(path)}")
    except Exception as e:
        print(f"[DEBUG] Kan inhoud van {path} niet tonen: {e}")

print("[DEBUG] Stap 1: Basiscontrole")
debug_list_folder(".")
debug_list_folder("data")
debug_list_folder("data/videos")

# === Secret Files
if not os.path.isfile(CLIENT_SECRETS_FILE):
    secret_json = os.getenv(CLIENT_SECRET_JSON_ENV)
    if secret_json:
        with open(CLIENT_SECRETS_FILE, "w") as f:
            f.write(secret_json)
        print("[DEBUG] client_secret.json aangemaakt")
    else:
        print(f"[ERROR] {CLIENT_SECRET_JSON_ENV} ontbreekt!")

if not os.path.isfile(TOKEN_FILE):
    token_json = os.getenv(OAUTH2_JSON_ENV)
    if token_json:
        with open(TOKEN_FILE, "w") as f:
            f.write(token_json)
        print("[DEBUG] oauth2.json aangemaakt")
    else:
        print(f"[ERROR] {OAUTH2_JSON_ENV} ontbreekt!")

# === Setup YouTube API client
YOUTUBE_UPLOAD_SCOPE = "https://www.googleapis.com/auth/youtube.upload"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

print("[DEBUG] Stap 2: YouTube API client bouwen")
storage = Storage(TOKEN_FILE)
credentials = storage.get()

if credentials is None or credentials.invalid:
    print("[DEBUG] Auth flow starten...")
    flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE, scope=YOUTUBE_UPLOAD_SCOPE)
    credentials = run_flow(flow, storage)
else:
    print("[DEBUG] Geldige credentials gevonden")

youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, credentials=credentials)

# === Titel & beschrijving laden
try:
    with open(TITLE_FILE, "r", encoding="utf-8") as f:
        title_result = f.read().strip()
        title_result = re.sub(r'[^\x20-\x7E]', '', title_result)[:100]
    print(f"[DEBUG] Titel geladen: {title_result}")
except Exception as e:
    print(f"[WARNING] Geen geldige titel gevonden, gebruik fallback. ({e})")
    title_result = "This AI-generated video will blow your mind! ðŸ¤–"

try:
    with open(SCRIPT_FILE, 'r', encoding='utf-8') as f:
        script_text = f.read().strip()
    script_sents = re.split(r'(?<=[.!?]) +', script_text)
    description = ' '.join(script_sents[:3])
    tags = ["AI", "automation", "trending", "shorts"]
    if script_sents:
        tags.append(script_sents[0][:20])
except:
    description = "Generated by AI. Enjoy!"
    tags = ["AI", "shorts", "science"]

# === Upload body
body = dict(
    snippet=dict(
        title=title_result,
        description=description,
        tags=tags,
        categoryId="28"
    ),
    status=dict(
        privacyStatus="public"
    )
)

# === Uploaden
if not os.path.exists(VIDEO_PATH):
    print(f"[ERROR] Video-bestand niet gevonden: {VIDEO_PATH}")
    sys.exit(1)

size_mb = os.path.getsize(VIDEO_PATH) / (1024 * 1024)
print(f"[DEBUG] Video gevonden ({size_mb:.2f} MB), start upload...")

media = MediaFileUpload(VIDEO_PATH, resumable=True, chunksize=5*1024*1024)

request = youtube.videos().insert(
    part="snippet,status",
    body=body,
    media_body=media
)

class TimeoutException(Exception): pass
def handler(signum, frame): raise TimeoutException("Upload timeout")

signal.signal(signal.SIGALRM, handler)
signal.alarm(900)  # 15 min timeout

try:
    print("[DEBUG] Upload gestart...")
    response = None
    while response is None:
        status, response = request.next_chunk()
        if status:
            print(f"[DEBUG] Upload voortgang: {int(status.progress() * 100)}%")
    print("[âœ…] Upload voltooid!")
    print(response)
except TimeoutException:
    print("[ERROR] Upload duurde te lang (timeout).")
except HttpError as e:
    print(f"[ERROR] YouTube API fout: {e}")
    print(e.content)
except Exception as e:
    print(f"[ERROR] Onverwachte fout: {e}")
    print(traceback.format_exc())
    sys.exit(1)
finally:
    signal.alarm(0)

print("[DEBUG] Uploadscript afgerond.")
