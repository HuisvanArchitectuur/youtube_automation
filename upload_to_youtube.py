print("==== START VAN SCRIPT ====")

import os
import json
import re
import signal
import sys
import traceback

from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from googleapiclient.errors import HttpError
from oauth2client.file import Storage
from oauth2client.client import flow_from_clientsecrets
from oauth2client.tools import run_flow

# === Paden ===
SCRIPT_FILE = "data/scripts/script.txt"
TITLE_FILE = "data/thumbnails/title.txt"
TOPIC_FILE = "data/topic.json"
VIDEO_PATH = "data/videos/output.mp4"
CLIENT_SECRETS_FILE = "client_secret.json"
TOKEN_FILE = "oauth2.json"

# === Omgevingsvariabelen voor secrets
CLIENT_SECRET_JSON_ENV = "YOUTUBE_CLIENT_SECRET_JSON"
OAUTH2_JSON_ENV = "YOUTUBE_REFRESH_TOKEN_JSON"

# === Debugfolders
def debug_folder(path):
    try:
        print(f"[DEBUG] Inhoud van {path}: {os.listdir(path)}")
    except Exception as e:
        print(f"[DEBUG] Kan inhoud {path} niet tonen: {e}")

print("[DEBUG] Controle folders")
debug_folder(".")
debug_folder("data")
debug_folder("data/videos")

# === Maak secret files aan vanuit GitHub Secrets
if not os.path.exists(CLIENT_SECRETS_FILE):
    secret_json = os.getenv(CLIENT_SECRET_JSON_ENV)
    if secret_json:
        with open(CLIENT_SECRETS_FILE, "w") as f:
            f.write(secret_json)
        print("[DEBUG] client_secret.json aangemaakt")
    else:
        print(f"[ERROR] {CLIENT_SECRET_JSON_ENV} ontbreekt!")

if not os.path.exists(TOKEN_FILE):
    token_json = os.getenv(OAUTH2_JSON_ENV)
    if token_json:
        with open(TOKEN_FILE, "w") as f:
            f.write(token_json)
        print("[DEBUG] oauth2.json aangemaakt")
    else:
        print(f"[ERROR] {OAUTH2_JSON_ENV} ontbreekt!")

# === YouTube API credentials
YOUTUBE_UPLOAD_SCOPE = "https://www.googleapis.com/auth/youtube.upload"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

storage = Storage(TOKEN_FILE)
credentials = storage.get()

if credentials is None or credentials.invalid:
    flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE, scope=YOUTUBE_UPLOAD_SCOPE)
    credentials = run_flow(flow, storage)

youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, credentials=credentials)

# === Titel
try:
    with open(TITLE_FILE, "r", encoding="utf-8") as f:
        title = f.read().strip()
        title = re.sub(r"[^\x20-\x7E]", "", title)[:100]
except:
    title = "This AI Short Will Blow Your Mind"

# === Beschrijving en tags
try:
    with open(SCRIPT_FILE, "r", encoding="utf-8") as f:
        script_text = f.read().strip()
        sentences = re.split(r'(?<=[.!?]) +', script_text)
        description = " ".join(sentences[:3])
        tags = ["AI", "trending", "shorts", "science", sentences[0][:20]]
except:
    description = "Generated by AI."
    tags = ["AI", "shorts", "trending"]

# === YouTube body
body = dict(
    snippet=dict(
        title=title,
        description=description,
        tags=tags,
        categoryId="28"
    ),
    status=dict(
        privacyStatus="public"
    )
)

# === Upload video
if not os.path.exists(VIDEO_PATH):
    print(f"[ERROR] Video ontbreekt: {VIDEO_PATH}")
    sys.exit(1)

print(f"[DEBUG] Video gevonden ({os.path.getsize(VIDEO_PATH)/1024/1024:.2f} MB)")

media = MediaFileUpload(VIDEO_PATH, resumable=True, chunksize=5 * 1024 * 1024)
request = youtube.videos().insert(part="snippet,status", body=body, media_body=media)

# === Timeout mechanisme
class TimeoutException(Exception): pass
def handler(signum, frame): raise TimeoutException("Upload timeout!")

signal.signal(signal.SIGALRM, handler)
signal.alarm(900)  # 15 minuten

try:
    print("[DEBUG] Upload gestart...")
    response = None
    while response is None:
        status, response = request.next_chunk()
        if status:
            print(f"[DEBUG] Upload voortgang: {int(status.progress() * 100)}%")
    print("✅ Upload voltooid!")
    print(response)
except TimeoutException:
    print("❌ Upload timeout.")
except HttpError as e:
    print(f"[ERROR] API fout: {e}")
    print(e.content)
except Exception as e:
    print(f"[ERROR] Onverwachte fout: {e}")
    print(traceback.format_exc())
finally:
    signal.alarm(0)

print("[DEBUG] Uploadscript afgerond.")
